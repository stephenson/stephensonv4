---

title: Choosing Ruby on Rails is not a technical decision
date: 2018-08-30 16:29 UTC
tags:

---

A few days ago I read a [blog post](https://blog.eq8.eu/article/is-rails-still-relevant-in-2018.html) about the current relevancy of Ruby on Rails, a piece of "old" technology that has been the core of all businesses I have created. The blog post in itself is not that interesting, but the following discussion on [Hacker News](https://news.ycombinator.com/item?id=17856314) was. A lot of people mentioned that the actual value of Rails is the speed of development, how fast you can go from nothing to an MVP and that got me thinking.

Yes, Rails is awesomely fast to prototype in, that is a fantastic feature, but Rails is also excellent to build a long-term sustainable business on.

<img alt="" class="alignfull" src="<%= image_path 'rails.jpg' %>">

Welcome to the world of Rails. [Source](https://github.com/rails/rails).
Firmafon was developed in Rails from day one, back when it was only two 21-year-old boys in a small apartment, but it's still the backbone of a company with thousands of business customers eight years later. And as quick as it was to build the MVP in Rails back in the day, as easy was it to maintain a reasonably large platform with less than a handful of developers.

When comparing the impact of one developer working at Trustpilot with one working at Firmafon, it strikes me how big impact micro-services,  frameworks, databases, and platforms have on the price of running a business.

People say that companies can't scale with Rails, but Twitter, Github, Shopify, and Zendesk have done pretty well, all build on Rails.

Rails are not about the technology; it's about the price of the technology.

Don't go the hipster hip way and jump on the most modern framework you can find, have an in-depth conversation about the kind of business you want to build, how development culture should be, what speed of development you require and then challenge what you come up with: could you do this in Rails? If maybe, then build it in Rails until you get in trouble. If trouble comes, you are successful enough to solve it.
